{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043e\u0442\u0435\u043b\u044f. \u0410\u0434\u043c\u0438\u043d\u0438\u043c\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0433\u043e\u0441\u0442\u0435\u0439, \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u0438 \u043d\u043e\u0432\u044b\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432. \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0433\u0434\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0443\u0431\u043e\u0440\u043a\u0443. \u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0444\u0438\u043b\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043d\u0430\u0442 \u0430 \u0442\u0430\u043a \u0436\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0433\u043e\u0441\u0442\u0435\u0439. \u0421\u0423\u0411\u0414: PostgreSQL \u0412\u0435\u0440\u0441\u0438\u044f:. 14.2","title":"Info"},{"location":"#_1","text":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043e\u0442\u0435\u043b\u044f. \u0410\u0434\u043c\u0438\u043d\u0438\u043c\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0433\u043e\u0441\u0442\u0435\u0439, \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u0438 \u043d\u043e\u0432\u044b\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432. \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0433\u0434\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0443\u0431\u043e\u0440\u043a\u0443. \u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0444\u0438\u043b\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043d\u0430\u0442 \u0430 \u0442\u0430\u043a \u0436\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0433\u043e\u0441\u0442\u0435\u0439. \u0421\u0423\u0411\u0414: PostgreSQL \u0412\u0435\u0440\u0441\u0438\u044f:. 14.2","title":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f"},{"location":"endpoints/","text":"HotelManager Get started python manage.py runserver mkdocs serve Available endpoints Authentication request /auth/token/login/ - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 POST: { \"password\": \"root\", \"username\": \"root\" } \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: HTTP 200 OK Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"auth_token\": \"41asdhu12h3jsadkh37721y38ashdjwadu23h4kjashd\" } /auth/token/logout/ - \u0412\u044b\u0445\u043e\u0434 \u041f\u0440\u0438\u043c\u0435\u0440 POST: {} \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: HTTP 204 No Content Allow: POST, OPTIONS Content-Type: application/json Vary: Accept /auth/users - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 POST: { \"email\": \"example@gmail.com\", \"username\": \"example\", \"password\": \"exampleexample\" } \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: HTTP 201 Created Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"email\": \"example@gmail.com\", \"username\": \"example\", \"id\": 9 } Get request /admins - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u0445 /admins/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u0441\u0442\u044f\u0445 /guests/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /guests?check_in_date_after={check_in_date}&check_in_date_before={check_in_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0435\u0437\u0434\u0430 /guests?check_out_date_after={check_out_date}&check_out_date_before={check_out_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0432\u044b\u0435\u0437\u0434\u0430 /guests?search={name, passport_number} - \u041d\u0430\u0439\u0442\u0438 \u0433\u043e\u0441\u0442\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0438\u043b\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 /guests?ordering={check_in_date,check_out_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u043f\u043e \u0434\u0430\u0442\u0435 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0435 \u0432\u044b\u0435\u0437\u0434\u0430 /guests?page={page} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 /rooms - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u0445 /rooms/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 rooms/type/<int:type>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 rooms/floor/<int:fl_g>/<int:fl_l>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043c\u0435\u0436\u0443 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u044d\u0442\u0430\u0436\u0430\u043c\u0438 rooms/floor-room-type/<int:floor>/<int:type>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 /rooms?price_min={price}&price_max={price} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d /rooms?number_min={number}&number_max={number} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 /rooms?type={type} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c /rooms?search={number} - \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c /rooms?ordering={number,price} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0438\u043b\u0438 \u0446\u0435\u043d\u0435 /rooms?page={page} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 /staff - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0447\u043b\u0435\u043d\u0430\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /staff/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0443\u0431\u043e\u0440\u043a\u0430\u0445 /cleaning/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435 /cleaning?room_number={room__number} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /cleaning?staff_name={staff__name} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u044b\u043c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u043c /cleaning?search={date_time,room__number,staff__name} - \u041d\u0430\u0439\u0442\u0438 \u0443\u0431\u043e\u0440\u043a\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u0435, \u043d\u043e\u043c\u0435\u0440\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0438\u043b\u0438 \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 /cleaning?ordering={date_time} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438 Post request /upload-room-picture - \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b /upload-files - \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439 \u043a\u043e\u043c\u043d\u0430\u0442 /admins - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 /rooms - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440 /guests - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u043e\u0441\u0442\u044f /staff - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u043a\u0443 Put/Patch request /admins/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /rooms/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /staff/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435 Delete request /admins/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /rooms/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /staff/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435","title":"API"},{"location":"endpoints/#hotelmanager","text":"","title":"HotelManager"},{"location":"endpoints/#get-started","text":"python manage.py runserver mkdocs serve","title":"Get started"},{"location":"endpoints/#available-endpoints","text":"","title":"Available endpoints"},{"location":"endpoints/#authentication-request","text":"/auth/token/login/ - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f","title":"Authentication request"},{"location":"endpoints/#post","text":"{ \"password\": \"root\", \"username\": \"root\" }","title":"\u041f\u0440\u0438\u043c\u0435\u0440 POST:"},{"location":"endpoints/#_1","text":"HTTP 200 OK Allow: POST, OPTIONS Content-Type: application/json Vary: Accept { \"auth_token\": \"41asdhu12h3jsadkh37721y38ashdjwadu23h4kjashd\" } /auth/token/logout/ - \u0412\u044b\u0445\u043e\u0434","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:"},{"location":"endpoints/#post_1","text":"{}","title":"\u041f\u0440\u0438\u043c\u0435\u0440 POST:"},{"location":"endpoints/#_2","text":"HTTP 204 No Content Allow: POST, OPTIONS Content-Type: application/json Vary: Accept /auth/users - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:"},{"location":"endpoints/#post_2","text":"{ \"email\": \"example@gmail.com\", \"username\": \"example\", \"password\": \"exampleexample\" }","title":"\u041f\u0440\u0438\u043c\u0435\u0440 POST:"},{"location":"endpoints/#_3","text":"HTTP 201 Created Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json Vary: Accept { \"email\": \"example@gmail.com\", \"username\": \"example\", \"id\": 9 }","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:"},{"location":"endpoints/#get-request","text":"/admins - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u0445 /admins/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u0441\u0442\u044f\u0445 /guests/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /guests?check_in_date_after={check_in_date}&check_in_date_before={check_in_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0435\u0437\u0434\u0430 /guests?check_out_date_after={check_out_date}&check_out_date_before={check_out_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0432\u044b\u0435\u0437\u0434\u0430 /guests?search={name, passport_number} - \u041d\u0430\u0439\u0442\u0438 \u0433\u043e\u0441\u0442\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0438\u043b\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 /guests?ordering={check_in_date,check_out_date} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u043f\u043e \u0434\u0430\u0442\u0435 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0435 \u0432\u044b\u0435\u0437\u0434\u0430 /guests?page={page} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 /rooms - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u0445 /rooms/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 rooms/type/<int:type>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 rooms/floor/<int:fl_g>/<int:fl_l>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043c\u0435\u0436\u0443 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u044d\u0442\u0430\u0436\u0430\u043c\u0438 rooms/floor-room-type/<int:floor>/<int:type>/ - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 /rooms?price_min={price}&price_max={price} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d /rooms?number_min={number}&number_max={number} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 /rooms?type={type} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c /rooms?search={number} - \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c /rooms?ordering={number,price} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0438\u043b\u0438 \u0446\u0435\u043d\u0435 /rooms?page={page} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 /staff - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0447\u043b\u0435\u043d\u0430\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /staff/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0443\u0431\u043e\u0440\u043a\u0430\u0445 /cleaning/{pk} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435 /cleaning?room_number={room__number} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /cleaning?staff_name={staff__name} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u0441\u0434\u0435\u043b\u0430\u043d\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u044b\u043c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u043c /cleaning?search={date_time,room__number,staff__name} - \u041d\u0430\u0439\u0442\u0438 \u0443\u0431\u043e\u0440\u043a\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u0435, \u043d\u043e\u043c\u0435\u0440\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0438\u043b\u0438 \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 /cleaning?ordering={date_time} - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u043e\u043a \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438","title":"Get request"},{"location":"endpoints/#post-request","text":"/upload-room-picture - \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b /upload-files - \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439 \u043a\u043e\u043c\u043d\u0430\u0442 /admins - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 /rooms - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440 /guests - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u043e\u0441\u0442\u044f /staff - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u043a\u0443","title":"Post request"},{"location":"endpoints/#putpatch-request","text":"/admins/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /rooms/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /staff/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning/{pk} - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435","title":"Put/Patch request"},{"location":"endpoints/#delete-request","text":"/admins/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0435 /guests/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0433\u043e\u0441\u0442\u0435 /rooms/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 /staff/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u043b\u0435\u043d\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 /cleaning/{pk} - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0443\u0431\u043e\u0440\u043a\u0435","title":"Delete request"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 Room { \"number\": \"3\", \"type\": \"2\", \"price\": 4500, \"floor\": 2, \"cleaners\": [ 2 ] } Guest { \"id\": 1, \"passport_number\": \"756776\", \"name\": \"Ivan\", \"surname\": \"Ivanov\", \"middlename\": \"Ivanovich\", \"from_location\": \"moscow\", \"check_in_date\": \"2022-09-16\", \"check_out_date\": \"2022-09-19\", \"prev_check_out_date\": \"2022-09-19\", \"room\": \"1\" } Staff { \"id\": 1, \"name\": \"Oleg\", \"phone\": \"+79897654344\" } Cleaning { \"id\": 1, \"date_time\": \"2022-09-23T00:00:00Z\", \"room\": \"3\", \"staff\": 2 }","title":"Models"},{"location":"models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"models/#room","text":"{ \"number\": \"3\", \"type\": \"2\", \"price\": 4500, \"floor\": 2, \"cleaners\": [ 2 ] }","title":"Room"},{"location":"models/#guest","text":"{ \"id\": 1, \"passport_number\": \"756776\", \"name\": \"Ivan\", \"surname\": \"Ivanov\", \"middlename\": \"Ivanovich\", \"from_location\": \"moscow\", \"check_in_date\": \"2022-09-16\", \"check_out_date\": \"2022-09-19\", \"prev_check_out_date\": \"2022-09-19\", \"room\": \"1\" }","title":"Guest"},{"location":"models/#staff","text":"{ \"id\": 1, \"name\": \"Oleg\", \"phone\": \"+79897654344\" }","title":"Staff"},{"location":"models/#cleaning","text":"{ \"id\": 1, \"date_time\": \"2022-09-23T00:00:00Z\", \"room\": \"3\", \"staff\": 2 }","title":"Cleaning"},{"location":"course_project/final/","text":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" , \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c. \u041e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u0445, \u0433\u043e\u0441\u0442\u044f\u0445, \u0447\u043b\u0435\u043d\u0430\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0443\u0431\u043e\u0440\u043a\u0438 \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u043f\u043e\u0438\u0441\u043a\u0430, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442, \u0433\u043e\u0441\u0442\u0435\u0439, \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u0438 \u0443\u0431\u043e\u0440\u043e\u043a. \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0438\u0437\u0443\u0447\u0435\u043d \u0438 \u043e\u0441\u0432\u043e\u0435\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b Django REST Framework , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a djoser \u0438 django-filter . \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Vue.js (Vuetify) . \u0411\u044b\u043b\u043e \u043e\u0441\u0432\u043e\u0435\u043d\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438 Docker \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL . \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0441\u0435\u0440\u0432\u0438\u0441 MkDocs . \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0437\u043d\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0432\u044b\u043a\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u00ab\u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"course_project/intro/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0412 5 - 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0435 (2021 - 2022 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u0433\u043e\u0434) \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \"\u0410\u0434\u043c\u0438\u043d\u0438\u043c\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" . \u041e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043e\u0442\u0435\u043b\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a: \u043f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043e\u0442\u0435\u043b\u0435; \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442, \u0433\u043e\u0441\u0442\u0435\u0439, \u0443\u0431\u043e\u0449\u0438\u043a\u043e\u0432; \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0443\u0431\u043e\u0440\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0443\u0431\u043e\u0440\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) . \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 djoser \u0438 django-filter .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"course_project/intro/#_1","text":"\u0412 5 - 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0435 (2021 - 2022 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u0433\u043e\u0434) \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \"\u0410\u0434\u043c\u0438\u043d\u0438\u043c\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" . \u041e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043e\u0442\u0435\u043b\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a: \u043f\u043e\u0438\u0441\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043e\u0442\u0435\u043b\u0435; \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442, \u0433\u043e\u0441\u0442\u0435\u0439, \u0443\u0431\u043e\u0449\u0438\u043a\u043e\u0432; \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0443\u0431\u043e\u0440\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0443\u0431\u043e\u0440\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) . \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 djoser \u0438 django-filter .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"course_project/project/","text":"\u0426\u0435\u043b\u044c \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0426\u0435\u043b\u044c : \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" \u0417\u0430\u0434\u0430\u0447\u0438 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Django \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST Framework \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 (backend) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) (frontend) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, backend \u0438 frontend \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0447\u0435\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 mkdocs","title":"\u0426\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"course_project/project/#_1","text":"\u0426\u0435\u043b\u044c : \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" \u0417\u0430\u0434\u0430\u0447\u0438 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Django \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST Framework \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 (backend) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) (frontend) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, backend \u0438 frontend \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0447\u0435\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 mkdocs","title":"\u0426\u0435\u043b\u044c  \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"course_project/title/","text":"\u041c\u0418\u041d\u0418\u0421\u0422\u0415\u0420\u0421\u0422\u0412\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0418 \u041d\u0410\u0423\u041a\u0418 \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u0420\u041c\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419, \u041c\u0415\u0425\u0410\u041d\u0418\u041a\u0418 \u0418 \u041e\u041f\u0422\u0418\u041a\u0418 \u0424\u0410\u041a\u0423\u041b\u042c\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u041a\u041e\u041c\u041c\u0423\u041d\u0418\u041a\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419 \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 \u0442\u0435\u043c\u0443 \u00ab\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\"\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u041b\u0430\u0439\u043e\u043a \u041e.\u0412. \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33421 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410. \u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"labs/lab1/1.1_containerization/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/) Backend Dockerfile FROM python:3.10.5 # set work directory WORKDIR /app # set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev # install dependencies RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt # copy project COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ] Frontend Dockerfile FROM node:16.15.1 WORKDIR /app COPY ./package.json ./ RUN npm install COPY ./ ./ CMD [\"npm\", \"run\", \"serve\"] \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"1.1 Containerization"},{"location":"labs/lab1/1.1_containerization/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab1/1.1_containerization/#backend-dockerfile","text":"FROM python:3.10.5 # set work directory WORKDIR /app # set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev # install dependencies RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt # copy project COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ]","title":"Backend Dockerfile"},{"location":"labs/lab1/1.1_containerization/#frontend-dockerfile","text":"FROM node:16.15.1 WORKDIR /app COPY ./package.json ./ RUN npm install COPY ./ ./ CMD [\"npm\", \"run\", \"serve\"] \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"Frontend Dockerfile"},{"location":"labs/lab1/1.2_orchestration/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB). Docker-compose file version: '3.7' services: backend: build: ./hotel_project/ command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; volumes: - ./hotel_project/:/app/ ports: - 8000:8000 env_file: - ./hotel_project/.env.dev depends_on: - db frontend: build: ./hotel_front/ ports: - 80:8080 depends_on: - backend db: image: postgres:14.0 volumes: - postgres_data:/var/lib/postgresql/data/ environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=hotel_db ports: - 3333:5432 volumes: postgres_data: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'hotel_db', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432', } } \u0421\u043e\u0431\u0435\u0440\u0435\u043c \u043d\u0430\u0448 \u043f\u0440\u043e\u0435\u043a\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u044d\u0442\u043e Valentina DB). \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d: \u0412\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435","title":"1.2 Orchestration"},{"location":"labs/lab1/1.2_orchestration/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB).","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab1/1.2_orchestration/#docker-compose-file","text":"version: '3.7' services: backend: build: ./hotel_project/ command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; volumes: - ./hotel_project/:/app/ ports: - 8000:8000 env_file: - ./hotel_project/.env.dev depends_on: - db frontend: build: ./hotel_front/ ports: - 80:8080 depends_on: - backend db: image: postgres:14.0 volumes: - postgres_data:/var/lib/postgresql/data/ environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres - POSTGRES_DB=hotel_db ports: - 3333:5432 volumes: postgres_data: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'hotel_db', 'USER': 'postgres', 'PASSWORD': 'postgres', 'HOST': 'db', 'PORT': '5432', } } \u0421\u043e\u0431\u0435\u0440\u0435\u043c \u043d\u0430\u0448 \u043f\u0440\u043e\u0435\u043a\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u044d\u0442\u043e Valentina DB). \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d: \u0412\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435","title":"Docker-compose file"},{"location":"labs/lab2/2.1.1_manual_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: path('rooms/type/<int:type>/', RoomTypeFilterView.as_view()), path('rooms/floor/<int:num_g>/<int:num_l>/', RoomFloorsFilterView.as_view()), path('rooms/floor-room-type/<int:floor>/<int:type>/', RoomFloorRoomTypeFilterView.as_view()) \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u0442\u0438\u043f\u0443: class RoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(type=self.kwargs['type']) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u044d\u0442\u0430\u0436\u0435\u0439: class RoomFloorsFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] pagination_class = PageNumberPagination def get_queryset(self): queryset = self.queryset.all() queryset = self.queryset.filter(floor=self.kwargs['floor'], number__gte=self.kwargs['num_g'], number__lte=self.kwargs['num_l']) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b: class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: queryset = queryset.filter(floor=self.kwargs['floor'], type=self.kwargs['type']) return queryset","title":"2.1.1 Manual filters"},{"location":"labs/lab2/2.1.1_manual_filters/#211","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1"},{"location":"labs/lab2/2.1.1_manual_filters/#_1","text":"path('rooms/type/<int:type>/', RoomTypeFilterView.as_view()), path('rooms/floor/<int:num_g>/<int:num_l>/', RoomFloorsFilterView.as_view()), path('rooms/floor-room-type/<int:floor>/<int:type>/', RoomFloorRoomTypeFilterView.as_view())","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"labs/lab2/2.1.1_manual_filters/#_2","text":"class RoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(type=self.kwargs['type']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u0442\u0438\u043f\u0443:"},{"location":"labs/lab2/2.1.1_manual_filters/#_3","text":"class RoomFloorsFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] pagination_class = PageNumberPagination def get_queryset(self): queryset = self.queryset.all() queryset = self.queryset.filter(floor=self.kwargs['floor'], number__gte=self.kwargs['num_g'], number__lte=self.kwargs['num_l']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u044d\u0442\u0430\u0436\u0435\u0439:"},{"location":"labs/lab2/2.1.1_manual_filters/#_4","text":"class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: queryset = queryset.filter(floor=self.kwargs['floor'], type=self.kwargs['type']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b:"},{"location":"labs/lab2/2.1.2_auto_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b (\u0441\u0432\u044f\u0437\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430); \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u043d\u044e \u0443\u0431\u043e\u0440\u043a\u0438, \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0438 \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430: class CleaningAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = CleaningSerializer queryset = Cleaning.objects.all() filter_backends = (DjangoFilterBackend, OrderingFilter, SearchFilter) filterset_fields = ['room__number','staff__name'] search_fields = ['date_time', \"room__number\", 'staff__name'] ordering_fields = ['date_time'] ordering = ['date_time'] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d\u044b \u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443;\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0446\u0435\u043d\u0435 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 class RoomFilter(FilterSet): price = RangeFilter() number = RangeFilter() type = MultipleChoiceFilter( choices=Room.ROOM_TYPE ) class Meta: model = Room fields = ['price', 'number','type'] class RoomAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = RoomSerializer queryset = Room.objects.all() filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = RoomFilter filterset_fields = ['price','number','type'] search_fields = ['number'] ordering_fields = ['number', 'price'] pagination_class = CustomPagination \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f, \u0434\u0430\u0442\u044b \u0432\u044b\u0435\u0437\u0434\u0430; \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443: class GuestFilter(FilterSet): check_in_date = DateFromToRangeFilter() check_out_date = DateFromToRangeFilter() class Meta: model = Guest fields = ['check_in_date','check_out_date'] class GuestAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = GuestSerializer queryset = Guest.objects.all().order_by('id') filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = GuestFilter filterset_fields = ['check_in_date','check_out_date'] search_fields = ['name','passport_number'] ordering_fields = ['check_in_date','check_out_date'] pagination_class = CustomPagination","title":"2.1.2 Auto filters"},{"location":"labs/lab2/2.1.2_auto_filters/#212","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2"},{"location":"labs/lab2/2.1.2_auto_filters/#django-filters","text":"'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:"},{"location":"labs/lab2/2.1.2_auto_filters/#_1","text":"class CleaningAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = CleaningSerializer queryset = Cleaning.objects.all() filter_backends = (DjangoFilterBackend, OrderingFilter, SearchFilter) filterset_fields = ['room__number','staff__name'] search_fields = ['date_time', \"room__number\", 'staff__name'] ordering_fields = ['date_time'] ordering = ['date_time']","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b (\u0441\u0432\u044f\u0437\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430); \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u043d\u044e \u0443\u0431\u043e\u0440\u043a\u0438, \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0438 \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430:"},{"location":"labs/lab2/2.1.2_auto_filters/#_2","text":"class RoomFilter(FilterSet): price = RangeFilter() number = RangeFilter() type = MultipleChoiceFilter( choices=Room.ROOM_TYPE ) class Meta: model = Room fields = ['price', 'number','type'] class RoomAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = RoomSerializer queryset = Room.objects.all() filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = RoomFilter filterset_fields = ['price','number','type'] search_fields = ['number'] ordering_fields = ['number', 'price'] pagination_class = CustomPagination","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d\u044b \u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443;\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0446\u0435\u043d\u0435 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443"},{"location":"labs/lab2/2.1.2_auto_filters/#_3","text":"class GuestFilter(FilterSet): check_in_date = DateFromToRangeFilter() check_out_date = DateFromToRangeFilter() class Meta: model = Guest fields = ['check_in_date','check_out_date'] class GuestAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = GuestSerializer queryset = Guest.objects.all().order_by('id') filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = GuestFilter filterset_fields = ['check_in_date','check_out_date'] search_fields = ['name','passport_number'] ordering_fields = ['check_in_date','check_out_date'] pagination_class = CustomPagination","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f, \u0434\u0430\u0442\u044b \u0432\u044b\u0435\u0437\u0434\u0430; \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443:"},{"location":"labs/lab2/2.2.1_default_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"2.2.1 Default Pagination"},{"location":"labs/lab2/2.2.1_default_pagination/#221","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1"},{"location":"labs/lab2/2.2.1_default_pagination/#_1","text":"'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e:"},{"location":"labs/lab2/2.2.2_custom_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438: class CustomPagination(PageNumberPagination): page_size = 5 page_size_query_param = 'page_size' def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.num_pages, 'page': self.page.number, 'results': data }) \u041f\u0440\u0438\u043c\u0435\u0440: class GuestAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = GuestSerializer queryset = Guest.objects.all().order_by('id') filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = GuestFilter filterset_fields = ['check_in_date','check_out_date'] search_fields = ['name','passport_number'] ordering_fields = ['check_in_date','check_out_date'] pagination_class = CustomPagination \u041f\u0440\u0438\u043c\u0435\u0440:","title":"2.2.2 Custom pagination"},{"location":"labs/lab2/2.2.2_custom_pagination/#222","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2"},{"location":"labs/lab2/2.2.2_custom_pagination/#_1","text":"class CustomPagination(PageNumberPagination): page_size = 5 page_size_query_param = 'page_size' def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.num_pages, 'page': self.page.number, 'results': data })","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"labs/lab2/2.2.2_custom_pagination/#_2","text":"class GuestAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticated] serializer_class = GuestSerializer queryset = Guest.objects.all().order_by('id') filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter] filterset_class = GuestFilter filterset_fields = ['check_in_date','check_out_date'] search_fields = ['name','passport_number'] ordering_fields = ['check_in_date','check_out_date'] pagination_class = CustomPagination","title":"\u041f\u0440\u0438\u043c\u0435\u0440:"},{"location":"labs/lab2/2.2.2_custom_pagination/#_3","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440:"},{"location":"labs/lab2/2.3.1_file_upload/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0444\u043e\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u044b: class UploadRoomPicture(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = RoomPictureSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') room = request.POST.get('room') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"room\": room, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response) \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440: @deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'min_size': (\"Ensure this file size is not less than %(min_size)s. \" \"Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, min_size=None, content_types=()): self.max_size = max_size self.min_size = min_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.min_size is not None and data.size < self.min_size: params = { 'min_size': filesizeformat(self.min_size), 'size': filesizeformat(data.size) } raise ValidationError(self.error_messages['min_size'], 'min_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = {'content_type': content_type} raise ValidationError(self.error_messages['content_type'], 'content_type', params) def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.min_size == other.min_size and self.content_types == other.content_types ) file_validator = FileValidator(max_size=1024 * 100, content_types=(\"image/jpeg\",)) class FileUploads(models.Model): file = models.FileField(validators=[file_validator]) \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u043e\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u044b: class RoomPictureSerializer(ModelSerializer): file = serializers.FileField() class Meta: model = RoomPicture fields = ['file', 'room', 'file_size'] \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432: class FileUploadsSerializer(ModelSerializer): class Meta: model = FileUploads fields = ['file'] \u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: class UploadRoomPicture(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = RoomPictureSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') room = request.POST.get('room') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"room\": room, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response) \u0412\u044c\u044e \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: class UploadFiles(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = FileUploadsSerializer permission_classes = [IsAuthenticated] def create(self, request): files = request.FILES.getlist('file') file_serializers = [] for file in files: print(file) serializer = self.serializer_class(data={\"file\": file}) try: serializer.is_valid(raise_exception=True) file_serializers.append(serializer) except ValidationError as err: return HttpResponseBadRequest(err) for serializer in file_serializers: serializer.save() response = f\"POST API and you have uploaded files\" return Response(response) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: \u041e\u0448\u0438\u0431\u043a\u0438:","title":"2.3.1 File upload & validation"},{"location":"labs/lab2/2.3.1_file_upload/#231","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1"},{"location":"labs/lab2/2.3.1_file_upload/#-","text":"class UploadRoomPicture(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = RoomPictureSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') room = request.POST.get('room') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"room\": room, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response)","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0444\u043e\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u044b:"},{"location":"labs/lab2/2.3.1_file_upload/#_1","text":"@deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'min_size': (\"Ensure this file size is not less than %(min_size)s. \" \"Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, min_size=None, content_types=()): self.max_size = max_size self.min_size = min_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.min_size is not None and data.size < self.min_size: params = { 'min_size': filesizeformat(self.min_size), 'size': filesizeformat(data.size) } raise ValidationError(self.error_messages['min_size'], 'min_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = {'content_type': content_type} raise ValidationError(self.error_messages['content_type'], 'content_type', params) def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.min_size == other.min_size and self.content_types == other.content_types ) file_validator = FileValidator(max_size=1024 * 100, content_types=(\"image/jpeg\",)) class FileUploads(models.Model): file = models.FileField(validators=[file_validator])","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440:"},{"location":"labs/lab2/2.3.1_file_upload/#_2","text":"class RoomPictureSerializer(ModelSerializer): file = serializers.FileField() class Meta: model = RoomPicture fields = ['file', 'room', 'file_size']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u043e\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u044b:"},{"location":"labs/lab2/2.3.1_file_upload/#_3","text":"class FileUploadsSerializer(ModelSerializer): class Meta: model = FileUploads fields = ['file']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"labs/lab2/2.3.1_file_upload/#_4","text":"class UploadRoomPicture(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = RoomPictureSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') room = request.POST.get('room') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"room\": room, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response)","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"labs/lab2/2.3.1_file_upload/#_5","text":"class UploadFiles(viewsets.ViewSet): queryset = RoomPicture.objects.all() serializer_class = FileUploadsSerializer permission_classes = [IsAuthenticated] def create(self, request): files = request.FILES.getlist('file') file_serializers = [] for file in files: print(file) serializer = self.serializer_class(data={\"file\": file}) try: serializer.is_valid(raise_exception=True) file_serializers.append(serializer) except ValidationError as err: return HttpResponseBadRequest(err) for serializer in file_serializers: serializer.save() response = f\"POST API and you have uploaded files\" return Response(response)","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"labs/lab2/2.3.1_file_upload/#_6","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"labs/lab2/2.3.1_file_upload/#_7","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"labs/lab2/2.3.1_file_upload/#_8","text":"","title":"\u041e\u0448\u0438\u0431\u043a\u0438:"},{"location":"labs/lab2/2.4.1_signals/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py: class HotelAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'hotel' def ready(self): import hotel.signals super().ready() \u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f: @receiver(post_save, sender=Guest) def save_logic(sender, instance, created, **kwargs): if created: print(\"New Guest created\") \u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0435\u0437\u0434\u0430 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0440\u043e\u0439 \u0434\u0430\u0442\u044b: @receiver(pre_save, sender=Guest) def update(sender, instance, **kwargs): try: prev_instance = Guest.objects.get(id=instance.id) instance.prev_check_out_date = prev_instance.check_out_date print(\"Prev check-out date updated\") except: pass \u0414\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: \u041f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: \u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: @receiver(post_delete, sender=Guest) def delete_log(sender, instance, **kwargs): print(f\"Delete {instance.name}\")","title":"2.4.1 Signals"},{"location":"labs/lab2/2.4.1_signals/#241","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1"},{"location":"labs/lab2/2.4.1_signals/#ready-appspy","text":"class HotelAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'hotel' def ready(self): import hotel.signals super().ready()","title":"\u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py:"},{"location":"labs/lab2/2.4.1_signals/#1","text":"@receiver(post_save, sender=Guest) def save_logic(sender, instance, created, **kwargs): if created: print(\"New Guest created\")","title":"\u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f:"},{"location":"labs/lab2/2.4.1_signals/#2","text":"@receiver(pre_save, sender=Guest) def update(sender, instance, **kwargs): try: prev_instance = Guest.objects.get(id=instance.id) instance.prev_check_out_date = prev_instance.check_out_date print(\"Prev check-out date updated\") except: pass","title":"\u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0435\u0437\u0434\u0430 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0440\u043e\u0439 \u0434\u0430\u0442\u044b:"},{"location":"labs/lab2/2.4.1_signals/#_1","text":"","title":"\u0414\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:"},{"location":"labs/lab2/2.4.1_signals/#_2","text":"","title":"\u041f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:"},{"location":"labs/lab2/2.4.1_signals/#3","text":"@receiver(post_delete, sender=Guest) def delete_log(sender, instance, **kwargs): print(f\"Delete {instance.name}\")","title":"\u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:"},{"location":"labs/lab3/3.1.1_tests/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0412\u0430\u0448\u0435\u043c API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0435\u043d\u0434\u043f\u0438\u043d\u0442\u044b \u0432 \u0412\u0430\u0448\u0435\u043c API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATHC \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u041a\u043e\u0434 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 import json from django.test import TestCase from rest_framework import status from django.urls import reverse from hotel.models import Room, Guest, Staff class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number='1', type=1, price = 1, floor = 1).cleaners.set(Staff.objects.filter()) def test_number_label(self): room = Room.objects.get() field_label = room._meta.get_field('number').verbose_name self.assertEquals(field_label, 'Room Number') def test_floor_label(self): room = Room.objects.get() field_label = room._meta.get_field('floor').verbose_name self.assertEquals(field_label, 'Floor Number') def test_price_label(self): room = Room.objects.get() field_label = room._meta.get_field('price').verbose_name self.assertEquals(field_label, 'Price') def test_room_type_label(self): room = Room.objects.get() field_label = room._meta.get_field('type').verbose_name self.assertEquals(field_label, 'Room Type') def test_get_room(self): url = reverse('room-detail', args=[1]) data = {\"number\": '1', \"type\": '1', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_room(self): url = reverse('room-list') data = {\"number\": '2', \"type\": '1', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_room(self): url = reverse('room-detail', args=[1]) data = {\"number\": '1', \"type\": '2', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class GuestModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number=1, type=1, price = 1, floor = 1).cleaners.set(Staff.objects.filter()) Guest.objects.create(passport_number = '123456', name = 'Oleg', surname = 'Layok', middlename = 'Vladimirovich', from_location = 'Russia', room = Room.objects.get()) def test_name_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Guest Name') def test_surname_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('surname').verbose_name self.assertEquals(field_label, 'Guest Surname') def test_name_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('middlename').verbose_name self.assertEquals(field_label, 'Guest Middlename') def test_passport_number_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('passport_number').verbose_name self.assertEquals(field_label, 'Passport Number') def test_from_location_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('from_location').verbose_name self.assertEquals(field_label, 'Guest Location') def test_check_in_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('check_in_date').verbose_name self.assertEquals(field_label, 'Guest Check-in Date') def test_check_out_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('check_out_date').verbose_name self.assertEquals(field_label, 'Guest Check-out Date') def test_prev_check_out_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('prev_check_out_date').verbose_name self.assertEquals(field_label, 'Previous Guest Check-out Date') def test_get_guest(self): url = reverse('guest-detail', args=[1]) data = {'id':1, 'passport_number':'123456', 'name':'Oleg', 'surname':'Layok', 'middlename':'Vladimirovich', 'from_location':'Russia', 'check_in_date': '2022-10-02', 'check_out_date': '2022-10-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_guest(self): url = reverse('guest-list') data = {'id':2,'passport_number':'546412', 'name':'Oleg', 'surname':'Layok', 'middlename':'Vladimirovich', 'from_location':'Russia', 'check_in_date': '2022-10-02', 'check_out_date': '2022-10-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_guest(self): url = reverse('guest-detail', args=[1]) data = {'id':1,'passport_number':'654321', 'name':'Oleg', 'surname':'Layok', 'middlename':'Olegovich', 'from_location':'England', 'check_in_date': '2022-10-02', 'check_out_date': '2022-11-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_delete_guest(self): url = reverse('guest-detail', args=[1]) response = self.client.delete(url) self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT) class StaffModelTest(TestCase): @classmethod def setUpTestData(cls): Staff.objects.create(name=\"Ivan\", phone='+79765776789') def test_name_label(self): staff = Staff.objects.get(id=1) field_label = staff._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Staff Full Name') def test_phone_label(self): staff = Staff.objects.get(id=1) field_label = staff._meta.get_field('phone').verbose_name self.assertEquals(field_label, 'Staff Phone Number') def test_get_staff(self): url = reverse('staff-detail', args=[1]) data = {\"id\": 1, \"name\": \"Ivan\", \"phone\": \"+79765776789\"} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_staff(self): url = reverse('staff-list') data = {\"id\": 2, \"name\": \"Oleg\", \"phone\": \"+75555555555\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_staff(self): url = reverse('staff-detail', args=[1]) data = {\"id\": 1, \"name\": \"Irena\", \"phone\": \"+79765776789\"} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0435\u0441\u0442\u043e\u0432","title":"3.1.1 Tests"},{"location":"labs/lab3/3.1.1_tests/#311","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0412\u0430\u0448\u0435\u043c API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0435\u043d\u0434\u043f\u0438\u043d\u0442\u044b \u0432 \u0412\u0430\u0448\u0435\u043c API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATHC \u0437\u0430\u043f\u0440\u043e\u0441\u0430)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"labs/lab3/3.1.1_tests/#_1","text":"import json from django.test import TestCase from rest_framework import status from django.urls import reverse from hotel.models import Room, Guest, Staff class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number='1', type=1, price = 1, floor = 1).cleaners.set(Staff.objects.filter()) def test_number_label(self): room = Room.objects.get() field_label = room._meta.get_field('number').verbose_name self.assertEquals(field_label, 'Room Number') def test_floor_label(self): room = Room.objects.get() field_label = room._meta.get_field('floor').verbose_name self.assertEquals(field_label, 'Floor Number') def test_price_label(self): room = Room.objects.get() field_label = room._meta.get_field('price').verbose_name self.assertEquals(field_label, 'Price') def test_room_type_label(self): room = Room.objects.get() field_label = room._meta.get_field('type').verbose_name self.assertEquals(field_label, 'Room Type') def test_get_room(self): url = reverse('room-detail', args=[1]) data = {\"number\": '1', \"type\": '1', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_room(self): url = reverse('room-list') data = {\"number\": '2', \"type\": '1', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_room(self): url = reverse('room-detail', args=[1]) data = {\"number\": '1', \"type\": '2', \"price\": 1, \"floor\": 1, 'cleaners': []} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class GuestModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number=1, type=1, price = 1, floor = 1).cleaners.set(Staff.objects.filter()) Guest.objects.create(passport_number = '123456', name = 'Oleg', surname = 'Layok', middlename = 'Vladimirovich', from_location = 'Russia', room = Room.objects.get()) def test_name_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Guest Name') def test_surname_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('surname').verbose_name self.assertEquals(field_label, 'Guest Surname') def test_name_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('middlename').verbose_name self.assertEquals(field_label, 'Guest Middlename') def test_passport_number_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('passport_number').verbose_name self.assertEquals(field_label, 'Passport Number') def test_from_location_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('from_location').verbose_name self.assertEquals(field_label, 'Guest Location') def test_check_in_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('check_in_date').verbose_name self.assertEquals(field_label, 'Guest Check-in Date') def test_check_out_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('check_out_date').verbose_name self.assertEquals(field_label, 'Guest Check-out Date') def test_prev_check_out_date_label(self): guest = Guest.objects.get(id=1) field_label = guest._meta.get_field('prev_check_out_date').verbose_name self.assertEquals(field_label, 'Previous Guest Check-out Date') def test_get_guest(self): url = reverse('guest-detail', args=[1]) data = {'id':1, 'passport_number':'123456', 'name':'Oleg', 'surname':'Layok', 'middlename':'Vladimirovich', 'from_location':'Russia', 'check_in_date': '2022-10-02', 'check_out_date': '2022-10-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_guest(self): url = reverse('guest-list') data = {'id':2,'passport_number':'546412', 'name':'Oleg', 'surname':'Layok', 'middlename':'Vladimirovich', 'from_location':'Russia', 'check_in_date': '2022-10-02', 'check_out_date': '2022-10-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_guest(self): url = reverse('guest-detail', args=[1]) data = {'id':1,'passport_number':'654321', 'name':'Oleg', 'surname':'Layok', 'middlename':'Olegovich', 'from_location':'England', 'check_in_date': '2022-10-02', 'check_out_date': '2022-11-02', 'prev_check_out_date': '2022-10-02', 'room':'1'} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_delete_guest(self): url = reverse('guest-detail', args=[1]) response = self.client.delete(url) self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT) class StaffModelTest(TestCase): @classmethod def setUpTestData(cls): Staff.objects.create(name=\"Ivan\", phone='+79765776789') def test_name_label(self): staff = Staff.objects.get(id=1) field_label = staff._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Staff Full Name') def test_phone_label(self): staff = Staff.objects.get(id=1) field_label = staff._meta.get_field('phone').verbose_name self.assertEquals(field_label, 'Staff Phone Number') def test_get_staff(self): url = reverse('staff-detail', args=[1]) data = {\"id\": 1, \"name\": \"Ivan\", \"phone\": \"+79765776789\"} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_staff(self): url = reverse('staff-list') data = {\"id\": 2, \"name\": \"Oleg\", \"phone\": \"+75555555555\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_staff(self): url = reverse('staff-detail', args=[1]) data = {\"id\": 1, \"name\": \"Irena\", \"phone\": \"+79765776789\"} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u041a\u043e\u0434 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"labs/lab3/3.1.1_tests/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"labs/lab4/4.1.1_filters_interface/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.1.1 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438, \u043a\u0430\u043a \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a \u0431\u044d\u043a\u0435\u043d\u0434\u0443. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f: \u0412\u0445\u043e\u0434: \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f: \u041f\u043e\u0438\u0441\u043a \u0433\u043e\u0441\u0442\u044f: \u041f\u043e\u0438\u0441\u043a \u043a\u043e\u043c\u043d\u0430\u0442\u044b: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0446\u0435\u043d\u0435: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0438\u043f\u0443: \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0434\u043c\u0438\u043d\u043e\u0432: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u0432: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0433\u043e\u0441\u0442\u0435\u0439: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043d\u0430\u0442: \u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u043e\u043a:","title":"4.1.1 Filters interface"},{"location":"labs/lab4/4.1.1_filters_interface/#411","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438, \u043a\u0430\u043a \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a \u0431\u044d\u043a\u0435\u043d\u0434\u0443.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.1.1"},{"location":"labs/lab4/4.1.1_filters_interface/#_1","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f:"},{"location":"labs/lab4/4.1.1_filters_interface/#_2","text":"","title":"\u0412\u0445\u043e\u0434:"},{"location":"labs/lab4/4.1.1_filters_interface/#_3","text":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:"},{"location":"labs/lab4/4.1.1_filters_interface/#_4","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f:"},{"location":"labs/lab4/4.1.1_filters_interface/#_5","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u0433\u043e\u0441\u0442\u044f:"},{"location":"labs/lab4/4.1.1_filters_interface/#_6","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u043a\u043e\u043c\u043d\u0430\u0442\u044b:"},{"location":"labs/lab4/4.1.1_filters_interface/#_7","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443:"},{"location":"labs/lab4/4.1.1_filters_interface/#_8","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0446\u0435\u043d\u0435:"},{"location":"labs/lab4/4.1.1_filters_interface/#_9","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0438\u043f\u0443:"},{"location":"labs/lab4/4.1.1_filters_interface/#_10","text":"","title":"\u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d:"},{"location":"labs/lab4/4.1.1_filters_interface/#_11","text":"","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0434\u043c\u0438\u043d\u043e\u0432:"},{"location":"labs/lab4/4.1.1_filters_interface/#_12","text":"","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u0432:"},{"location":"labs/lab4/4.1.1_filters_interface/#_13","text":"","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0433\u043e\u0441\u0442\u0435\u0439:"},{"location":"labs/lab4/4.1.1_filters_interface/#_14","text":"","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043d\u0430\u0442:"},{"location":"labs/lab4/4.1.1_filters_interface/#_15","text":"","title":"\u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u043e\u043a:"}]}